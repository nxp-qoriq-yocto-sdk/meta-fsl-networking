From 075df99a67272e8cd23c692f68add389b3aaae45 Mon Sep 17 00:00:00 2001
From: Paul Barrette <paul.barrette@freescale.com>
Date: Tue, 30 Nov 2010 10:14:12 -0500
Subject: [PATCH] Code Cleanup fix new toolchain warnings etc.

-added Makefile ifdef for non ltib builds
-cleaned up compile warnings for inline failures
-reordered linking of libs for new toolchain

Signed-off-by: Paul Barrette <paul.barrette@freescale.com>
---
 fsl_pme/Makefile |   25 +++++++++++++++++--------
 fsl_pme/common.c |   79 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 fsl_pme/common.h |   75 +++++++--------------------------------------------------------------------
 3 files changed, 103 insertions(+), 76 deletions(-)

diff --git a/fsl_pme/Makefile b/fsl_pme/Makefile
index f352926..c3f15f0 100644
--- a/fsl_pme/Makefile
+++ b/fsl_pme/Makefile
@@ -1,6 +1,6 @@
 # ***********************< BEGIN COPYRIGHT >************************
 # 
-#  Copyright (c) 2005-2009 Freescale Semiconductor All Rights Reserved. 
+#  Copyright (c) 2005-2011 Freescale Semiconductor All Rights Reserved.
 # 
 #   NOTICE: The information contained in this file is proprietary 
 #   to Freescale Semiconductor and is being made available to 
@@ -9,6 +9,14 @@
 #   under the terms of the license agreement. 
 # 
 # ***********************< END COPYRIGHT >**************************
+
+# used for internal devel only
+ifdef OTC_LOCAL
+   CROSS_COMPILE := powerpc-none-linux-gnuspe-
+   export PATH=/proj/tools/dev-tools/ppc_tool_chain/gcc-4.3.74-eglibc-2.8.74-dp-2/powerpc-none-linux-gnuspe/bin/:$PATH
+   export SYS_PATH := /proj/tools/dev-tools/ppc_tool_chain/gcc-4.3.74-eglibc-2.8.74-dp-2
+endif
+# ------------------------------------------
 CC       := $(CROSS_COMPILE)gcc
 AR       := $(CROSS_COMPILE)ar
 LIB_PATH := $(PWD)/lib 
@@ -18,23 +26,24 @@ CFLAGS   += -Wstrict-prototypes
 DEFINES  := -DPLATFORM_8572_ds_git
 LIB_PATH += $(SYS_PATH)/lib
 INC_PATH += $(SYS_PATH)/include
+RM       :=/bin/rm
 
 APPS             := pmm
-pmm_objs         := pmm.o
-pmm_link_libs    := swutilities pmll regex pmlalocal pmci statefulrules
+pmm_objs         := pmm.o common.o
+pmm_link_libs    := pmll regex pmlalocal pmci statefulrules swutilities
 pmm_link_libs    += edit ncurses pthread rt
 
 APPS                   += pm_scan_demo
-pm_scan_demo_objs      := pm_scan_demo.o
+pm_scan_demo_objs      := pm_scan_demo.o common.o
 pm_scan_demo_link_libs := swutilities pmci
 pm_scan_demo_link_libs +=
 
 APPS              += pm_util
 pm_util_objs      := util.o util_reg.o util_kill.o util_reset.o util_load.o
-pm_util_objs      += util_unload.o util_monitor.o util_writeback.o
+pm_util_objs      += util_unload.o util_monitor.o util_writeback.o  common.o
 
 APPS              += pmsmd
-pmsmd_objs        := pmsm.o
+pmsmd_objs        := pmsm.o  common.o
 pmsmd_link_libs   := swutilities
 pmsmd_link_libs   += pthread
 
@@ -76,13 +85,13 @@ endef
 
 define clean_lib
 @echo "  RM $($(1)_objs) lib/lib$(1).a"
-@rm -f $($(1)_objs) lib/lib$(1).a
+@$(RM) -f $($(1)_objs) lib/lib$(1).a
 endef
 
 define clean_app
 @echo "clean_app"
 @echo "  RM $($(1)_objs) bin/$(1)"
-@rm -f $($(1)_objs) bin/$(1)
+@$(RM) -f $($(1)_objs) bin/$(1)
 endef
 
 #
diff --git a/fsl_pme/common.c b/fsl_pme/common.c
new file mode 100644
index 0000000..94a32f0
--- /dev/null
+++ b/fsl_pme/common.c
@@ -0,0 +1,79 @@
+/************************< BEGIN COPYRIGHT >************************
+ *
+ *  Copyright (c) 2005-2011 Freescale Semiconductor All Rights Reserved.
+ *
+ *   NOTICE: The information contained in this file is proprietary
+ *   to Freescale Semiconductor and is being made available to
+ *   Freescale's customers under a specific license agreement.
+ *   Use or disclosure of this information is permissible only
+ *   under the terms of the license agreement.
+ *
+ ************************< END COPYRIGHT >***************************/
+#include "common.h"
+
+ int parse_int(const char *arg, int *val, const char *s)
+{
+	char *cptr;
+	long lval = strtol(arg, &cptr, 0);
+	if ((((lval == LONG_MAX) || (lval == LONG_MIN)) && (errno == ERANGE)) ||
+			(*cptr != '\0')) {
+		fprintf(stderr, "ERROR, invalid parameter '%s' for %s\n",
+			arg, s);
+		return -1;
+	}
+	*val = (int)lval;
+	return 0;
+}
+
+ int parse_uint(const char *arg, unsigned int *val, const char *s)
+{
+	char *cptr;
+	unsigned long lval = strtoul(arg, &cptr, 0);
+	if (((lval == ULONG_MAX) && (errno == ERANGE)) || (*cptr != '\0')) {
+		fprintf(stderr, "ERROR, invalid parameter '%s' for %s\n",
+			arg, s);
+		return -1;
+	}
+	*val = (unsigned int)lval;
+	return 0;
+}
+
+ int parse_uint_ex(const char *arg, unsigned int *val, const char *s,
+				const char *valid_eos, char **cptr)
+{
+	unsigned long lval = strtoul(arg, cptr, 0);
+	if (((lval == ULONG_MAX) && (errno == ERANGE)) ||
+			((**cptr != '\0') && !strchr(valid_eos, **cptr))) {
+		fprintf(stderr, "ERROR, invalid parameter '%s' for %s\n",
+			arg, s);
+		return -1;
+	}
+	*val = (unsigned int)lval;
+	return 0;
+}
+
+ int parse_uchar(const char *arg, unsigned char *val, const char *s)
+{
+	char *cptr;
+	unsigned long lval = strtoul(arg, &cptr, 0);
+	if (((lval == ULONG_MAX) && (errno == ERANGE)) || (*cptr != '\0')) {
+		fprintf(stderr, "ERROR, invalid parameter '%s' for %s\n",
+			arg, s);
+		return -1;
+	}
+	*val = (unsigned char)lval;
+	return 0;
+}
+
+ int parse_addr(const char *arg, void **val, const char *s)
+{
+	char *cptr;
+	unsigned long lval = strtoul(arg, &cptr, 0);
+	if (((lval == ULONG_MAX) && (errno == ERANGE)) || (*cptr != '\0')) {
+		fprintf(stderr, "ERROR, invalid parameter '%s' for %s\n",
+			arg, s);
+		return -1;
+	}
+	*val = (void *)lval;
+	return 0;
+}
diff --git a/fsl_pme/common.h b/fsl_pme/common.h
index f03a871..e94110c 100644
--- a/fsl_pme/common.h
+++ b/fsl_pme/common.h
@@ -1,6 +1,6 @@
 /************************< BEGIN COPYRIGHT >************************
  * 
- *  Copyright (c) 2005-2009 Freescale Semiconductor All Rights Reserved. 
+ *  Copyright (c) 2005-2011 Freescale Semiconductor All Rights Reserved.
  * 
  *   NOTICE: The information contained in this file is proprietary 
  *   to Freescale Semiconductor and is being made available to 
@@ -19,71 +19,10 @@
 #define USAGE_CLEAR	"          "
 #define USAGE_ERROR	"Error, usage:   "
 
-static inline int parse_int(const char *arg, int *val, const char *s)
-{
-	char *cptr;
-	long lval = strtol(arg, &cptr, 0);
-	if((((lval == LONG_MAX) || (lval == LONG_MIN)) && (errno == ERANGE)) ||
-			(*cptr != '\0')) {
-		fprintf(stderr, "ERROR, invalid parameter '%s' for %s\n",
-			arg, s);
-		return -1;
-	}
-	*val = (int)lval;
-	return 0;
-}
-
-static inline int parse_uint(const char *arg, unsigned int *val, const char *s)
-{
-	char *cptr;
-	unsigned long lval = strtoul(arg, &cptr, 0);
-	if(((lval == ULONG_MAX) && (errno == ERANGE)) || (*cptr != '\0')) {
-		fprintf(stderr, "ERROR, invalid parameter '%s' for %s\n",
-			arg, s);
-		return -1;
-	}
-	*val = (unsigned int)lval;
-	return 0;
-}
-
-static inline int parse_uint_ex(const char *arg, unsigned int *val, const char *s,
-				const char *valid_eos, char **cptr)
-{
-	unsigned long lval = strtoul(arg, cptr, 0);
-	if(((lval == ULONG_MAX) && (errno == ERANGE)) ||
-			((**cptr != '\0') && !strchr(valid_eos, **cptr))) {
-		fprintf(stderr, "ERROR, invalid parameter '%s' for %s\n",
-			arg, s);
-		return -1;
-	}
-	*val = (unsigned int)lval;
-	return 0;
-}
-
-static inline int parse_uchar(const char *arg, unsigned char *val, const char *s)
-{
-	char *cptr;
-	unsigned long lval = strtoul(arg, &cptr, 0);
-	if(((lval == ULONG_MAX) && (errno == ERANGE)) || (*cptr != '\0')) {
-		fprintf(stderr, "ERROR, invalid parameter '%s' for %s\n",
-			arg, s);
-		return -1;
-	}
-	*val = (unsigned char)lval;
-	return 0;
-}
-
-static inline int parse_addr(const char *arg, void **val, const char *s)
-{
-	char *cptr;
-	unsigned long lval = strtoul(arg, &cptr, 0);
-	if(((lval == ULONG_MAX) && (errno == ERANGE)) || (*cptr != '\0')) {
-		fprintf(stderr, "ERROR, invalid parameter '%s' for %s\n",
-			arg, s);
-		return -1;
-	}
-	*val = (void *)lval;
-	return 0;
-}
-
+extern int parse_int(const char *arg, int *val, const char *s);
+extern int parse_uint(const char *arg, unsigned int *val, const char *s);
+extern int parse_uint_ex(const char *arg, unsigned int *val, const char *s,
+				const char *valid_eos, char **cptr);
+extern int parse_uchar(const char *arg, unsigned char *val, const char *s);
+extern int parse_addr(const char *arg, void **val, const char *s);
 #endif /* !defined(VERIFICATION_PM_DMA_COMMON_H) */
-- 
1.7.4

